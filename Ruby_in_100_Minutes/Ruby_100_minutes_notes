# RUBY IN 100 MINUTES NOTES:
Resource: http://tutorials.jumpstartlab.com/projects/ruby_in_100_minutes.html#8.-collections

IMPORTANT: When calling programs in the command line; eg. object.instance(*1)
*1 Use '' when it's a string
*1 Do NOT use '' when it's a number

Content structure: 

1. Instructions and Interpreters
2. Variables
3. Methods
4. Strings
5. Numbers
6. Symbols
7. Collections
8. Arrays
9. Hashes
10. Conditionals
11. Conditional Decisions
12. Conditional Looping
13. Nil & Nothingness

1. INSTRUCTIONS & INTERPRETERS
	When you’re writing a "real" program, this is the way to do it. We might have a file named my_program.rb like this:
  
  class Sample
    def hello
      puts "Hello, World!"
    end
  end

  s = Sample.new
  s.hello

2. VARIABLES
	Everything needs a name so we can refer to it.

	Storing flexible values into variables with the (=) sign.
	Variables names are still restricted to being all lower-case, start with a letter or an underscore _ and can have numbers (but not at the start).

3. RUNNING RUBY FROM A FILE
	
	load 'file_name.rb'

4. OBJECTS, ATRRIBUTES and METHODS

	In Ruby, everything is an object. Objects know information, called attributes, and they can do actions, called methods.

	A class is an abstract idea, it defines what all objects of that type can know and do.

	In Ruby, we define an object using the class keyword. 

		class Any_name_beginning_with_capital_letters.
			def Name_of_the_method
			end (Remember to finish the method)
		end (Remember to finish the class too.)

	Once we define a class, we create an instance of that class like this:

		frank = Class_name.new
		We’re calling the new method on the class PersonalChef and storing it into the variable named frank. 

4.1 METHOD PARAMETERS
	
	Sometimes methods take one or more parameters that tell them how to do what they’re supposed to do. 

		class PersonalChef
  			def make_toast(color)
    			puts "Making your toast #{color}"
  			end
		end

4.2 RETURN VALUE

	In Ruby, every time you call a method you get a value back.
	"Returning" himself to you. Here’s how we implement it in code:

		class PersonalChef
  			def make_toast(color)
   			 puts "Making your toast #{color}"
    			return self
  			end

  			def make_eggs(quantity)
    		puts "Making you #{quantity} eggs!"
    		return self
  			end

		end

	We do this because we often want to call multiple methods on an object one after the other – this is called method chaining .
	We can call multiple methods by using the format object.method1.method2.method3.

5. STRINGS

	In Ruby a string is defined as a quote (") followed by zero or more letters, numbers, or symbols and followed by another quote (").
	
5.1 STRING METHODS
	
	object.delete('any_letter')
	object.gsub("any_letter_or_word", "any_other_thing") ---- Call gsub to replace a substring with a different string.
	object.length('any_word') 
	object.split(",") ---- The split method is somewhat complex because it’s used to break a single string into a set of strings. 
	object[number_of_the_character_in_the_string..limit] ---- For example, word = "Isofacto" > word[3..7] will return "facto"

5.2 COMBINING VARIABLES INTO STRINGS

	today = "Saturday"
	puts "Happy " + today + "!"

5.3 STRING INTERPOLATION

	String interpolation is the process of sticking data into the middle of strings. We use the interpolation marker #{}. Inside those brackets we can put any variables or Ruby code which will be evaluated, converted to a string, and output in that spot. 


6. SYMBOLS
	
	You can recognize a symbol because it starts with a colon then one or more letters, like :flag or :best_friend.
	Symbols are used for passing information around inside our program. We’d never print a symbol out to a user – for that we’d use a string.

7. NUMBERS

	integers (whole numbers) and floats (have a decimal point).

7.1 ITERATING

	The times method will be used as follows: 

	def make_eggs(quantity)
  		quantity.times do
    	puts "Making an egg."
  	end
  	puts "I'm done!"
  	return self
	end

8. COLLECTIONS

	There are two main types of collections in Ruby: arrays and hashes.

8.1 ARRAYS

	An array is a number-indexed list. 

		meals = ["breakfast","lunch","dinner"]
		puts meals[2]
		puts meals.first
		puts meals.last

		puts meals[3]
		meals << "dessert"
		puts meals[3]
		puts meals

	In order to get a specific element in the array you use the syntax arrayname[index].

	There are lots of cool things to do with an array. You can rearrange the order of the elements using the sort method. You can iterate through each element using the each method. You can mash them together into one string using the join method. You can find the address of a specific element by using the index method. You can ask an array if an element is present with the include? method.

8.2 HASHES

	A hash is a collection of data where each element of data is addressed by a name. 